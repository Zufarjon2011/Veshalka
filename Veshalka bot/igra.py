import logging
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
from aiogram.dispatcher.filters import Text
import time
from collections import defaultdict

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '6568445010:AAEMrkTOPFvkl2nMYDu3I-04AGbChjsdQhc'  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
games = defaultdict(lambda: {
    'word': None,
    'attempts': 6,
    'letters_guessed': set(),
    'players': [],
    'current_player': None,
    'game_started': False,
})

# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
words = ["python", "javascript", "programming", "computer", "science", "artificial", "intelligence"]

# –§—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã
def get_word():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    return random.choice(words)

def display_hangman(attempts):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏—Å–µ–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫."""
    stages = [  # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                """,
                # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                """,
                # –¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                """,
                # –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                """,
                # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                """,
                # –ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
                """
                   --------
                   |      |
                   |      
                   |      
                   |      
                   |     
                   -
                """
    ]
    return stages[attempts]

def get_current_player(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    return games[chat_id]['players'][games[chat_id]['current_player']]

def next_player(chat_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    current_player = games[chat_id]['current_player']
    games[chat_id]['current_player'] = (current_player + 1) % len(games[chat_id]['players'])

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É."""
    chat_id = message.chat.id
    games[chat_id]['game_started'] = False
    games[chat_id]['players'].append(message.from_user.first_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                        f"–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –í–µ—à–∞–ª–∫—É? üïπ\n"
                        f"–ù–∞–ø–∏—à–∏ /new —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")

@dp.message_handler(commands=['new'])
async def new_game(message: types.Message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É."""
    chat_id = message.chat.id
    if games[chat_id]['game_started']:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! üéÆ")
        return

    games[chat_id]['word'] = get_word()
    games[chat_id]['attempts'] = 6
    games[chat_id]['letters_guessed'] = set()
    games[chat_id]['current_player'] = 0
    games[chat_id]['game_started'] = True

    await message.answer(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üé≤\n"
                         f"–°–ª–æ–≤–æ: {'*' * len(games[chat_id]['word'])} \n"
                         f"–ü–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']} \n"
                         f"–•–æ–¥–∏—Ç {get_current_player(chat_id)}.")


@dp.message_handler(commands=['join'])
async def join_game(message: types.Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ."""
    chat_id = message.chat.id
    if not games[chat_id]['game_started']:
        await message.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! ‚è≥")
        return
    if message.from_user.first_name not in games[chat_id]['players']:
        games[chat_id]['players'].append(message.from_user.first_name)
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! üëç\n"
                             f"–°–ª–æ–≤–æ: {'*' * len(games[chat_id]['word'])} \n"
                             f"–ü–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']} \n"
                             f"–•–æ–¥–∏—Ç {get_current_player(chat_id)}.")
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! üòâ")


@dp.message_handler(Text(equals='–¥–∞'), state='*')
async def continue_game(message: types.Message):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–∞—É–∑—ã."""
    chat_id = message.chat.id
    if not games[chat_id]['game_started']:
        await message.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! ‚è≥")
        return

    hidden_word = ''.join([letter if letter in games[chat_id]['letters_guessed'] else '*'
                           for letter in games[chat_id]['word']])
    await message.answer(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üéÆ\n"
                         f"–°–ª–æ–≤–æ: {hidden_word} \n"
                         f"–ü–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']} \n"
                         f"–•–æ–¥–∏—Ç {get_current_player(chat_id)}.")


@dp.message_handler(Text(equals='–Ω–µ—Ç'), state='*')
async def end_game(message: types.Message):
    """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É."""
    chat_id = message.chat.id
    await message.answer("–•–æ—Ä–æ—à–æ, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üèÅ")
    games[chat_id]['game_started'] = False


@dp.message_handler()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–∫–æ–≤."""
    chat_id = message.chat.id
    if not games[chat_id]['game_started']:
        await message.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! ‚è≥")
        return
    if message.from_user.first_name != get_current_player(chat_id):
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥! üôÖ")
        return
    if message.text.lower() in games[chat_id]['letters_guessed']:
        await message.answer("–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞–∑–≤–∞–Ω–∞! ü§î")
        return
    if message.text.lower() in games[chat_id]['word']:
        games[chat_id]['letters_guessed'].add(message.text.lower())
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")

        hidden_word = ''.join([letter if letter in games[chat_id]['letters_guessed'] else '*'
                               for letter in games[chat_id]['word']])

        if all(letter in games[chat_id]['letters_guessed'] for letter in games[chat_id]['word']):
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {get_current_player(chat_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ\n"
                                 f"–°–ª–æ–≤–æ: {games[chat_id]['word']}")
            games[chat_id]['game_started'] = False
            return

        await message.answer(f"–°–ª–æ–≤–æ: {hidden_word} \n"
                             f"–ü–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']} \n"
                             f"–•–æ–¥–∏—Ç {get_current_player(chat_id)}.")
        next_player(chat_id)

    else:
        games[chat_id]['attempts'] -= 1
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! üòî\n"
                             f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']}\n"
                             f"{display_hangman(games[chat_id]['attempts'])}")

        if games[chat_id]['attempts'] == 0:
            await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò≠\n"
                                 f"–°–ª–æ–≤–æ –±—ã–ª–æ: {games[chat_id]['word']}"
                                 f"/start")
            games[chat_id]['game_started'] = False
            return


        await message.answer(f"–°–ª–æ–≤–æ: {[words]} \n"
                            f"–ü–æ–ø—ã—Ç–æ–∫: {games[chat_id]['attempts']} \n"
                            f"–•–æ–¥–∏—Ç {get_current_player(chat_id)}.")
        next_player(chat_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


